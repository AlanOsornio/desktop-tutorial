# Clase base abstracta
from abc import ABC, abstractmethod

class Persona(ABC):
    def __init__(self, nombre: str, id: int):
        self._nombre = nombre  # Atributo encapsulado (privado)
        self._id = id  # Atributo encapsulado (privado)

    # Getters y Setters
    def get_nombre(self):
        return self._nombre
    
    def set_nombre(self, nombre: str):
        self._nombre = nombre

    def get_id(self):
        return self._id
    
    def set_id(self, id: int):
        self._id = id

    # Método abstracto
    @abstractmethod
    def realizar_pedido(self):
        pass


# Clase Cliente que hereda de Persona
class Cliente(Persona):
    def __init__(self, nombre: str, id: int):
        super().__init__(nombre, id)

    def realizar_pedido(self):
        print(f"Cliente {self.get_nombre()} ha realizado un pedido.")


# Clase Cocina
class Cocina:
    def __init__(self):
        self._estado_plato = "No preparado"

    def preparar_plato(self):
        self._estado_plato = "Preparado"
        print("Cocina: El plato ha sido preparado.")
        return self._estado_plato


# Clase Informes
class Informes:
    def __init__(self):
        self._datos_validos = False

    def validar_datos(self):
        self._datos_validos = True
        print("Informes: Datos validados correctamente.")
        return self._datos_validos

    def emitir_comprobante(self):
        print("Informes: Emisión de comprobante exitosa.")
        return "Comprobante emitido"


# Clase Pedidos
class Pedidos:
    def __init__(self):
        self._id_pedido = None

    def crear_pedido(self):
        self._id_pedido = 1  # Simula la creación de un pedido
        print("Pedidos: Pedido creado exitosamente.")

    def manejar_error(self):
        try:
            # Simulamos un error
            raise Exception("Error al preparar el plato")
        except Exception as e:
            print(f"Pedidos: {e}. Manejo del error realizado.")


# Clase ControlPedidos que hereda de Pedidos
class ControlPedidos(Pedidos):
    def gestionar_pedido(self):
        print("ControlPedidos: Gestionando el pedido...")
        try:
            print("ControlPedidos: Preparando el plato...")
        except Exception as e:
            self.manejar_error()


# Simulación del flujo principal
if __name__ == "__main__":
    # Crear instancias
    cliente = Cliente("Juan Perez", 101)
    informes = Informes()
    cocina = Cocina()
    control_pedidos = ControlPedidos()

    # Flujo de acciones
    cliente.realizar_pedido()
    if informes.validar_datos():
        control_pedidos.crear_pedido()
        comprobante = informes.emitir_comprobante()
        print(f"Cliente recibe: {comprobante}")
        try:
            estado_plato = cocina.preparar_plato()
            print(f"Estado del plato: {estado_plato}")
        except Exception as e:
            control_pedidos.manejar_error()
